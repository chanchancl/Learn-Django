
1.URL
django的URL可以嵌套，
示例如下

# In settings/urls/main.py
from django.conf.urls import include, url

urlpatterns = [
    url(r'^(?P<username>\w+)/blog/', include('foo.urls.blog')),
]

# In foo/urls/blog.py
from django.conf.urls import url
from . import views

urlpatterns = [
    url(r'^$', views.blog.index),
    url(r'^archive/$', views.blog.archive),
]

url可以被命名，这有什么好处？
简单的来说，可以让在你模板里出现的URL，不需要被硬编码(hard code)
这样当你的某个URL需要更改时，就不需要遍历所有的HTML模板然后修改。

PS: notepad++自带的编码转换大法好

2.View
Django的 view 带有修饰器。。可以起到一些辅助作用
如 
@require_http_methods([])
@require_GET()
@require_POST()
@require_safe()
safe是这样定义的:
Decorator to require that a view only accepts the GET and HEAD methods. These methods are commonly considered “safe” because they should not have the significance of taking an action other than retrieving the requested resource.

3.Form

django中，一个Form想要处理某一个数据项的时候，这个
<input> 标记，必须要有  name 属性，否则数据并不会被 POST 接受。也就是说在request.POST 中没有该数据

一旦你定义了一个Form如
from django import forms

class UploadFileForm(forms.Form):
    test = forms.CharField(label='test',max_length=50)
    
form = UploadFileForm(request.POST)

这个form实例的 test成员并不可以被直接访问  form.test
    相反可以通过 别的方式访问
    form['test']  返回的是这个field完整的html档案 如 
    <input id="id_test" maxlength="50" name="test" type="text" value="1" />
    
    form.cleaned_data['test'] 返回只是 value的值如
    1


form有一个成员变量名叫 data
我测试的时候，把filed的名字也命名为 data。。。结果测了半天也不知道问题出在哪里。。。23333

总算是了解 表单的使用方法了。。


4.Module

Module真麻烦。。。

突然发现了，  signals   简直是神奇啊
可以像捕获消息一样，捕获有关的各种操作 恩。

去app1里面测试一下

test
    在admin后台，进入增加某个modle的页面时，就会init一个该modle，即发送pre_init
    per_init和 post_init 发送的很频繁，当页面view需要查询数据时，都会发送该信号
    
    而 per_save 和 post_save 则较少，发现只有当 create 或 modify 一个modle时，才会发送该信号
    对应的 pre_delete 和 post_delete 也只有当 删除某个modle时，才会被发送。
    >>> myModel.objects.all()
    pre_init11111111111
    post_init2222222222 <class 'learn.models.myModel'> {'instance': <myModel: 1>, 'signal': <django.db.models.signals.ModelSignal object at 0x00000244EFD26080>}
    pre_init11111111111
    post_init2222222222 <class 'learn.models.myModel'> {'instance': <myModel: 233>, 'signal': <django.db.models.signals.ModelSignal object at 0x00000244EFD26080>}
    pre_init11111111111
    post_init2222222222 <class 'learn.models.myModel'> {'instance': <myModel: 3444>, 'signal': <django.db.models.signals.ModelSignal object at 0x00000244EFD26080>}
    [<myModel: 1>, <myModel: 233>, <myModel: 3444>]
    
    同样的在 $python manage.py shell 中测试，在使用 all() 来获取 QuerySet时，也会发送对应的信号
    
    使用 myModel.objects.create() 创建记录，会分别触发 init 和 save 信息
    
    使用 myModel.object.filter  获取QuerySet时，只有当匹配到记录时，才会init对应的对象，然后返回列表
    
    
    modify 一条记录时，log信息为
        pre_save333333333333
        post_save44444444444 <class 'learn.models.myModel'> 
        {'signal': <django.db.models.signals.ModelSignal object at 0x000001F5D41E4208>, 'update_fields': None, 
        'raw': False, 'created': False, 'instance': <myModel: 11111>, 'using': 'default'}
        
    create 一条记录时，log信息为
        pre_save333333333333
        post_save44444444444 <class 'learn.models.myModel'> 
        {'signal': <django.db.models.signals.ModelSignal object at 0x000001F5D41E4208>, 'update_fields': None, 
        'raw': False, 'created': True, 'instance': <myModel: 屈博伟>, 'using': 'default'}
    
    啊哈，根据(**kwargs)这里的 created 是否为 True 即可判断这是不是一个 新建动作
    
delete 信号没啥特殊的，顾名思义


另外，发现 django的 admin后台 非常值得研究，看前端和后端是如何结合  与 分界的。

前端与js的结合
    lastChecked=null
    $(actionCheckboxes).click(function(event) {
            if (!event) { event = window.event; }
            var target = event.target ? event.target : event.srcElement;
            if (lastChecked && $.data(lastChecked) !== $.data(target) && event.shiftKey === true) {
                var inrange = false;
                $(lastChecked).prop("checked", target.checked)
                    .parent().parent().toggleClass(options.selectedClass, target.checked);
                $(actionCheckboxes).each(function() {
                    if ($.data(this) === $.data(lastChecked) || $.data(this) === $.data(target)) {
                        inrange = (inrange) ? false : true;
                    }
                    if (inrange) {
                        $(this).prop("checked", target.checked)
                            .parent().parent().toggleClass(options.selectedClass, target.checked);
                    }
                });
            }
            $(target).parent().parent().toggleClass(options.selectedClass, target.checked);
            lastChecked = target;
            updateCounter();
        });
    
    在该地址下http://127.0.0.1:8000/admin/learn/mymodel/
    每条记录前面有一个checkout 框，当点击这个框时，会发生一些动作，
    这些动作的响应，如上面的代码。。。这里还牵扯到 jQuery。。。心好累
    

真麻烦啊。。一不小心把编码搞错了，结果一行一行中文从Github上复制下来。。
Github有没有回滚功能啊。。。




